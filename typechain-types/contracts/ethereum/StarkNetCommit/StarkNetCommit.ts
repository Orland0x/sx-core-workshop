/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StarkNetCommitInterface extends utils.Interface {
  functions: {
    "commit(uint256)": FunctionFragment;
    "setAuth(uint256)": FunctionFragment;
    "starknetAuthenticatorOfL1Tx()": FunctionFragment;
    "starknetCore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commit"
      | "setAuth"
      | "starknetAuthenticatorOfL1Tx"
      | "starknetCore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetAuthenticatorOfL1Tx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starknetCore",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "starknetAuthenticatorOfL1Tx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetCore",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface StarkNetCommit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarkNetCommitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commit(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuth(
      _starknetAuthenticatorOfL1Tx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetAuthenticatorOfL1Tx(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    starknetCore(overrides?: CallOverrides): Promise<[string]>;
  };

  commit(
    _hash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuth(
    _starknetAuthenticatorOfL1Tx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetAuthenticatorOfL1Tx(overrides?: CallOverrides): Promise<BigNumber>;

  starknetCore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    commit(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuth(
      _starknetAuthenticatorOfL1Tx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    starknetAuthenticatorOfL1Tx(overrides?: CallOverrides): Promise<BigNumber>;

    starknetCore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    commit(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuth(
      _starknetAuthenticatorOfL1Tx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetAuthenticatorOfL1Tx(overrides?: CallOverrides): Promise<BigNumber>;

    starknetCore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    commit(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuth(
      _starknetAuthenticatorOfL1Tx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetAuthenticatorOfL1Tx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    starknetCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
