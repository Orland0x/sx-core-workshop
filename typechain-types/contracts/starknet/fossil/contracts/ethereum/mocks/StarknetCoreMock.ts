/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface StarknetCoreMockInterface extends utils.Interface {
  functions: {
    "consumeMessageFromL2(uint256,uint256[])": FunctionFragment;
    "sendMessageToL2(uint256,uint256,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "consumeMessageFromL2" | "sendMessageToL2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consumeMessageFromL2",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToL2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "consumeMessageFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToL2",
    data: BytesLike
  ): Result;

  events: {
    "MessageReceivedFromL2(uint256,uint256[])": EventFragment;
    "MessageSentToL2(uint256,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageReceivedFromL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSentToL2"): EventFragment;
}

export interface MessageReceivedFromL2EventObject {
  fromAddress: BigNumber;
  payload: BigNumber[];
}
export type MessageReceivedFromL2Event = TypedEvent<
  [BigNumber, BigNumber[]],
  MessageReceivedFromL2EventObject
>;

export type MessageReceivedFromL2EventFilter =
  TypedEventFilter<MessageReceivedFromL2Event>;

export interface MessageSentToL2EventObject {
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
}
export type MessageSentToL2Event = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  MessageSentToL2EventObject
>;

export type MessageSentToL2EventFilter = TypedEventFilter<MessageSentToL2Event>;

export interface StarknetCoreMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetCoreMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageToL2(
      to_address: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  consumeMessageFromL2(
    fromAddress: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageToL2(
    to_address: PromiseOrValue<BigNumberish>,
    selector: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToL2(
      to_address: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageReceivedFromL2(uint256,uint256[])"(
      fromAddress?: null,
      payload?: null
    ): MessageReceivedFromL2EventFilter;
    MessageReceivedFromL2(
      fromAddress?: null,
      payload?: null
    ): MessageReceivedFromL2EventFilter;

    "MessageSentToL2(uint256,uint256,uint256[])"(
      toAddress?: null,
      selector?: null,
      payload?: null
    ): MessageSentToL2EventFilter;
    MessageSentToL2(
      toAddress?: null,
      selector?: null,
      payload?: null
    ): MessageSentToL2EventFilter;
  };

  estimateGas: {
    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageToL2(
      to_address: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToL2(
      to_address: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
