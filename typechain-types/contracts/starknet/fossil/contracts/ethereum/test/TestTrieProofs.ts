/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace RLP {
  export type RLPItemStruct = {
    len: PromiseOrValue<BigNumberish>;
    memPtr: PromiseOrValue<BigNumberish>;
  };

  export type RLPItemStructOutput = [BigNumber, BigNumber] & {
    len: BigNumber;
    memPtr: BigNumber;
  };
}

export interface TestTrieProofsInterface extends utils.Interface {
  functions: {
    "bytes2hex(bytes)": FunctionFragment;
    "decodeNibbles(bytes,uint256)": FunctionFragment;
    "extractNibble(bytes32,uint256)": FunctionFragment;
    "getNextHash((uint256,uint256))": FunctionFragment;
    "merklePatriciaCompactDecode(bytes)": FunctionFragment;
    "sharedPrefixLength(uint256,bytes,bytes)": FunctionFragment;
    "verify(bytes,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bytes2hex"
      | "decodeNibbles"
      | "extractNibble"
      | "getNextHash"
      | "merklePatriciaCompactDecode"
      | "sharedPrefixLength"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bytes2hex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeNibbles",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractNibble",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextHash",
    values: [RLP.RLPItemStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "merklePatriciaCompactDecode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedPrefixLength",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bytes2hex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeNibbles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractNibble",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merklePatriciaCompactDecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedPrefixLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface TestTrieProofs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestTrieProofsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytes2hex(
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decodeNibbles(
      compact: PromiseOrValue<BytesLike>,
      skipNibbles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { nibbles: string }>;

    extractNibble(
      path: PromiseOrValue<BytesLike>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { nibble: number }>;

    getNextHash(
      node: RLP.RLPItemStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { nextHash: string }>;

    merklePatriciaCompactDecode(
      compact: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { nibbles: string }>;

    sharedPrefixLength(
      xsOffset: PromiseOrValue<BigNumberish>,
      xs: PromiseOrValue<BytesLike>,
      ys: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verify(
      proofRLP: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      path32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;
  };

  bytes2hex(
    input: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  decodeNibbles(
    compact: PromiseOrValue<BytesLike>,
    skipNibbles: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  extractNibble(
    path: PromiseOrValue<BytesLike>,
    position: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getNextHash(
    node: RLP.RLPItemStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  merklePatriciaCompactDecode(
    compact: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  sharedPrefixLength(
    xsOffset: PromiseOrValue<BigNumberish>,
    xs: PromiseOrValue<BytesLike>,
    ys: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verify(
    proofRLP: PromiseOrValue<BytesLike>,
    rootHash: PromiseOrValue<BytesLike>,
    path32: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bytes2hex(
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    decodeNibbles(
      compact: PromiseOrValue<BytesLike>,
      skipNibbles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    extractNibble(
      path: PromiseOrValue<BytesLike>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getNextHash(
      node: RLP.RLPItemStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    merklePatriciaCompactDecode(
      compact: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    sharedPrefixLength(
      xsOffset: PromiseOrValue<BigNumberish>,
      xs: PromiseOrValue<BytesLike>,
      ys: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      proofRLP: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      path32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bytes2hex(
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeNibbles(
      compact: PromiseOrValue<BytesLike>,
      skipNibbles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractNibble(
      path: PromiseOrValue<BytesLike>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextHash(
      node: RLP.RLPItemStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merklePatriciaCompactDecode(
      compact: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharedPrefixLength(
      xsOffset: PromiseOrValue<BigNumberish>,
      xs: PromiseOrValue<BytesLike>,
      ys: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      proofRLP: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      path32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytes2hex(
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeNibbles(
      compact: PromiseOrValue<BytesLike>,
      skipNibbles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractNibble(
      path: PromiseOrValue<BytesLike>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextHash(
      node: RLP.RLPItemStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merklePatriciaCompactDecode(
      compact: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharedPrefixLength(
      xsOffset: PromiseOrValue<BigNumberish>,
      xs: PromiseOrValue<BytesLike>,
      ys: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      proofRLP: PromiseOrValue<BytesLike>,
      rootHash: PromiseOrValue<BytesLike>,
      path32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
